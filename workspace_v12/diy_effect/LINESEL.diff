--- ../LINESEL.ZD2.code.asm	2025-07-02 19:14:03.967713056 -0600
+++ LINESEL.asm	2025-07-04 21:33:21.783258673 -0600
@@ -12,37 +12,37 @@
            LDW.D2T2      *B5[B4],B0
            LDW.D1T1      *A4[1],A0
            LDW.D1T1      *A4[0],A4
-           MVK.L2        0,B4
+           MVK.L2        0,B4		; on/off = midi param 0
            NOP           1
            CALLP.S2      __call_stub,B3
  ||        MV.L2         B0,B31
            MV.L2X        A4,B0
-    [ B0]  BNOP.S1       $C$L1,5
+    [ B0]  BNOP.S1       $C$L1_1,5
            ;.fphead       n, l, W, BU, nobr, nosat, 0101111b
            LDW.D2T2      *+B5[3],B0
            MVK.S1        0x6666,A6
-           MVKH.S1       0x44300000,A6
+           MVKH.S1       0x44300000,A6	; '705.6' as float
            MV.L1         A0,A4
            NOP           1
            B.S2          B0
-           ADDKPC.S2     $C$RL1,B3,4
-;$C$RL1_1:
-$C$RL1:
-           BNOP.S1       $C$L2,5
-;$C$L1_1:
-$C$L1:
+           ADDKPC.S2     $C$RL1_1,B3,4
+$C$RL1_1:
+;$C$RL1:
+           BNOP.S1       $C$L2_1,5
+$C$L1_1:
+;$C$L1:
            LDW.D2T2      *B5[3],B0
            ;.fphead       n, l, W, BU, br, nosat, 1001000b
            LDW.D2T2      *++B15[2],B3
            MVK.S1        0x6666,A6
            MVK.S2        0x007f,B4
-           MVKH.S1       0x44300000,A6
+           MVKH.S1       0x44300000,A6	; '705.6' as float
            BNOP.S2       B0,0
            SHL.S2        B4,0x17,B4
            MV.L1         A0,A4
            NOP           3
-;$C$L2_1:
-$C$L2:
+$C$L2_1:
+;$C$L2:
            LDW.D2T2      *++B15[2],B3
            NOP           4
            ;.fphead       n, l, W, BU, nobr, nosat, 1110000b
@@ -58,15 +58,15 @@
            LDW.D2T2      *B4[0],B0
            LDW.D1T1      *A4[1],A0
            LDW.D1T1      *A4[0],A4
-           MVK.L2        2,B4
-           MVK.S1        151,A6
+           MVK.L2        2,B4		; 1st user param = midi param 2
+           MVK.S1        151,A6		; 151 clicks = 0 - 150 inclusive
            MV.L2         B0,B31
  ||        CALLP.S2      __call_stub,B3
            ;.fphead       n, l, W, BU, nobr, nosat, 0111110b
            MV.L1         A4,A8
            MVK.S1        255,A4
  ||        MVK.L2        0,B6
-           SHL.S1        A4,0x16,A4
+           SHL.S1        A4,0x16,A4	; '1.5' as float
  ||        LDW.D2T2      *+B5[30],B31
  ||        CALLP.S2      __call_stub,B3
  ||        MVK.L2        0,B4
@@ -80,7 +80,7 @@
            MVK.S1        20,A4
            MV.L1X        B6,A6
            ADD.L1        A0,A4,A4
-           NOP           2
+           ;NOP           2
 
 	.def Fx_SFX_LineSel_OutLvl_edit
 	.align 32
@@ -125,9 +125,9 @@
            MV.L2         B4,B1
            ADD.L2X       B4,A0,B4
            LDW.D2T2      *B4[0],B0
-           MVK.S2        0x026c,B4
+           MVKL.S2       _Fx_SFX_LineSel_Coe,B4
 	; 0000010c  00000109 R_C6000_ABS_L16        8000026c   _Fx_SFX_LineSel_Coe + 0
-           MVKH.S2       0x80000000,B4
+           MVKH.S2       _Fx_SFX_LineSel_Coe,B4
 	; 00000110  0000010a R_C6000_ABS_H16        8000026c   _Fx_SFX_LineSel_Coe + 0
            MV.L1         A4,A10
            LDW.D1T1      *A4[1],A4
@@ -135,6 +135,7 @@
  ||        MVK.S1        28,A6
            ;.fphead       n, l, W, BU, nobr, nosat, 1100110b
  ||        CALLP.S2      __call_stub,B3
+
            CALLP.S2      Fx_SFX_LineSel_EfxLvl_edit,B3
  ||        MV.L1X        B1,A11
  ||        MV.L2         B1,B4
@@ -148,77 +149,86 @@
 	.def Fx_SFX_LineSel
 	.align 32
 Fx_SFX_LineSel:
-           LDW.D2T2      *+B4[7],B5
-           LDW.D2T2      *+B4[1],B20
-           LDW.D2T2      *+B4[8],B21
-           LDW.D2T1      *+B4[2],A5
-           MVK.L2        0,B19
-           MVK.L2        0,B9
-           MVK.S1        16,A0
-           LDW.D1T2      *A4[1],B4
-           ;.fphead       n, l, W, BU, nobr, nosat, 1000000b
- ||        SET.S2        B9,23,29,B9
- ||        MVK.L2        2,B0
-           MV.L2         B21,B6
- ||        ADD.S2        B19,B20,B8
- ||        LDW.D2T2      *B5[0],B7
- ||        ADD.L1        A0,-1,A0
- ||        ADD.S1X       A5,B19,A4
-;$C$L1_5:
-$C$L1:
-;$C$L2_5:
-$C$L2:
-           LDW.D2T2      *B6++[1],B5
-           NOP           4
-           STW.D2T2      B5,*+B7[0]
-           ;.fphead       n, l, W, BU, nobr, nosat, 0101010b
-           LDW.D2T2      *+B4[5],B17
-           LDW.D2T2      *+B8[0],B5
-           NOP           3
-           LDW.D2T2      *B4[0],B16
-           MPYSP.M2      B5,B17,B18
-           NOP           2
-           LDW.D2T2      *B4[4],B17
-           MPYSP.M2      B16,B18,B16
-           NOP           3
-           ;.fphead       n, h, W, BU, nobr, nosat, 0010100b
-           MPYSP.M2      B17,B16,B16
-           NOP           3
-           STW.D2T2      B16,*B8++[1]
-           LDW.D2T2      *B4[6],B16
-           LDW.D2T2      *B4[0],B17
-           NOP           4
-           SUBSP.L2      B9,B17,B16
- ||        MPYSP.M2      B5,B16,B5
-           ;.fphead       n, h, W, BU, nobr, nosat, 0001000b
-           NOP           2
-           LDW.D2T2      *+B4[4],B17
-           MPYSP.M2      B16,B5,B5
-           NOP           2
-           LDW.D1T1      *A4[0],A3
-           MPYSP.M2      B17,B5,B5
-           NOP           2
-    [ A0]  BDEC.S1       $C$L1,A0
-           ;.fphead       n, l, W, BU, nobr, nosat, 0001000b
-           ADDSP.L2X     B5,A3,B5
-           NOP           3
-           STW.D1T2      B5,*A4++[1]
-           ADD.L2        B0,-1,B0
- ||        MVK.S1        16,A3
- ||        ADDK.S2       64,B19
- ||        MV.D2         B21,B6
-           ADD.L1        A3,-1,A0
- ||        ADD.L2        B19,B20,B8
- || [ B0]  B.S1          $C$L1
-           ;.fphead       n, l, W, BU, nobr, nosat, 0010110b
-    [!B0]  BNOP.S2       B3,4
+           LDW.D2T2      *+B4[7],B5	; pointer to 'something' structure
+           LDW.D2T2      *+B4[1],B20	; base of 'effect' output buffer
+           LDW.D2T2      *+B4[8],B21	; base of 'effect' input buffer
+           LDW.D2T1      *+B4[2],A5	; base of 'pedal' (ie to amp) output buffer
+
+           MVK.L2        0,B19		; zero offset into 'pedal' output buffer
+           MVK.L2        0,B9		;
+           MVK.S1        16,A0		; prep inner loop x16
+
+           LDW.D1T2      *A4[1],B4	; base of 'co-efficients'
+ ||        SET.S2        B9,23,29,B9	; set B9 = 1.0 float
+ ||        MVK.L2        2,B0		; prep outer loop x2
+
+           MV.L2         B21,B6		; pointer to 'effect' input
+ ||        ADD.S2        B19,B20,B8	; add offset, pointer to 'effects' output
+ ||        LDW.D2T2      *B5[0],B7	; pointer to 'curent sample' store (within 'something')
+ ||        ADD.L1        A0,-1,A0	; tweak for BDEC
+ ||        ADD.S1X       A5,B19,A4	; add offset, pointer to 'pedal' output
+$C$L1_5:
+;$C$L1:
+							; outer loop (x2)
+$C$L2_5:
+;$C$L2:
+							; inner loop (x16)
+							; Compute and write to 'pedal' outout
+           		LDW.D2T2      *B6++[1],B5	; read buffer? 'effect' input
+           		NOP           4
+           		STW.D2T2      B5,*+B7[0]	; write to 'current sample'? note B7 never increased...
+
+           		LDW.D2T2      *+B4[5],B17	; K5
+           		LDW.D2T2      *+B8[0],B5	; read previous sample back from 'effect' output???
+							; note B8: increases as loop runs
+           		NOP           3
+
+           		LDW.D2T2      *B4[0],B16	; K0
+           		MPYSP.M2      B5,B17,B18 	; Sample * K5
+           		NOP           2			;
+           		LDW.D2T2      *B4[4],B17	; K4
+           		MPYSP.M2      B16,B18,B16 	; K0 * (Sample * K5)
+           		NOP           3			;
+           		MPYSP.M2      B17,B16,B16	; K4 * (K0 * (Sample * K5))
+           		NOP           3			;
+           		STW.D2T2      B16,*B8++[1]	; write audio to 'effect' output
+
+							; Compute and write to 'pedal' outout
+           		LDW.D2T2      *B4[6],B16	; K6
+           		LDW.D2T2      *B4[0],B17	; K0
+           		NOP           4			;
+           		SUBSP.L2      B9,B17,B16	; 1.0 - K0
+ ||        		MPYSP.M2      B5,B16,B5 	; Sample * K6 (runnig in parallel)
+           		NOP           2			;
+           		LDW.D2T2      *+B4[4],B17	; K4
+           		MPYSP.M2      B16,B5,B5		;(1.0 - K0) * (Sample * K6)
+           		NOP           2			;
+           		LDW.D1T1      *A4[0],A3		; read previous sample back from 'pedal' output
+							; note: A4 increases as loop runs
+           		MPYSP.M2      B17,B5,B5		; K4 * ((1.0 - K0) * (Sample * K6))
+           		NOP           2			;
+    [ A0]  		BDEC.S1       $C$L2_5,A0	; LOOP 15 times back to $C$L2 (delay slots = 5)
+           		ADDSP.L2X     B5,A3,B5		; combine previous 'pedal' and curent sample
+           		NOP           3			;
+           		STW.D1T2      B5,*A4++[1]	; write audio to 'pedal' output
+
+           	ADD.L2        B0,-1,B0		; decrement outer loop counter
+ ||        	MVK.S1        16,A3		; reload 16 loops
+ ||        	ADDK.S2       64,B19		; 2nd outer loop adds 64byte offset 'effect' output buffer?
+ ||        	MV.D2         B21,B6		; update pointer to input audio (same audio repeated?)
+
+           	ADD.L1        A3,-1,A0		; tweak for BDEC
+ ||        	ADD.L2        B19,B20,B8	; increase/update pointer to output audio block
+ || [ B0]  	B.S1          $C$L1_5		; outer loop back to $C$L1
+    [!B0]  	BNOP.S2       B3,4		; add delay to compensate for delay slots
+
  ||        ADD.L1X       A5,B19,A4
-           NOP           
-           NOP           
-           NOP           
-           NOP           
-           NOP           
-           NOP           
+           ;NOP           
+           ;NOP           
+           ;NOP           
+           ;NOP           
+           ;NOP           
+           ;NOP           
 
 	.def __call_stub
 	.align 32
@@ -250,23 +260,23 @@
  ||        LDDW.D2T1     *++B15[1],A7:A6
            LDW.D2T1      *++B15[2],A2
            NOP           4
-           NOP           
+           ;NOP           
 
 	.def Dll_LineSel
 	.align 32
 Dll_LineSel:
            BNOP.S2       B3,1
            MVK.L1        4,A0
- ||        MVK.S2        0x0130,B0
+ ||        MVKL.S2       LineSel,B0
 	; 00000264  00000909 R_C6000_ABS_L16        80000130   LineSel + 0
-           MVK.S1        0x0000,A1
+           MVKL.S1       effectTypeImageInfo,A1
 	; 00000268  00000809 R_C6000_ABS_L16        80000000   effectTypeImageInfo + 0
- ||        MVKH.S2       0x80000000,B0
+ ||        MVKH.S2       LineSel,B0
 	; 0000026c  0000090a R_C6000_ABS_H16        80000130   LineSel + 0
  ||        STB.D1T1      A0,*A4[0]
            STW.D1T2      B0,*A4[1]
- ||        MVKH.S1       0x80000000,A1
-	; 00000274  0000080a R_C6000_ABS_H16        80000000   effectTypeImageInfo + 0
+ ||        MVKH.S1       effectTypeImageInfo,A1
+	; 00000274  0000080a R_C6000_ABS_H16   80000000   effectTypeImageInfo + 0
            STW.D1T1      A1,*+A4[3]
            ;.fphead       n, l, W, BU, nobr, nosat, 0010001b
 
@@ -286,8 +296,8 @@
  ||        LDDW.D2T1     *++B15[1],A15:A14
            LDW.D2T2      *++B15[2],B14
            NOP           4
-           NOP           
-           NOP           
+           ;NOP           
+           ;NOP           
            ;.fphead       n, l, W, BU, nobr, nosat, 0001111b
 
 	.def __push_rts
@@ -305,8 +315,8 @@
            STDW.D2T2     B11:B10,*B15--[1]
            STDW.D2T1     A11:A10,*B15--[1]
            STDW.D2T2     B3:B2,*B15--[1]
-           NOP           
-           NOP           
+           ;NOP           
+           ;NOP           
            ;.fphead       n, l, W, BU, nobr, nosat, 0011100b
 	.sect ".const"
 
@@ -318,7 +328,7 @@
 effectTypeImageInfo:
            .word 0x00000017
            .word 0x00000020
-           .word 0x80000210
+           .word _picTotalDisplay_LineSel
 	; 80000008  00000201 R_C6000_ABS32          80000210   _picTotalDisplay_LineSel + 0
            .word 0x00000000
            .word 0x00000000
@@ -401,14 +411,14 @@
 	.dwattr $C$DW$2, DW_AT_low_pc(LineSel)
 	.dwattr $C$DW$2, DW_AT_high_pc(0x00)
 LineSel:
-           .word 0x664f6e4f
+           .word 0x664f6e4f		; 'OnOff'
            .word 0x00000066
            .word 0x00000000
-           .word 0x00000001
-           .word 0x00000000
-           .word 0x00000000
+           .word 0x00000001		; max
+           .word 0x00000000		; init
            .word 0x00000000
            .word 0x00000000
+           .word Fx_SFX_LineSel_onf
 	; 8000014c  00000701 R_C6000_ABS32          00000000   Fx_SFX_LineSel_onf + 0
            .word 0x00000000
            .word 0x00000000
@@ -416,30 +426,32 @@
            .word 0x00000000
            .word 0x00000000
            .word 0x00000000
-           .word 0x656e694c
+
+           .word 0x656e694c		; 'LineSel'
            .word 0x006c6553
            .word 0x00000000
-           .word 0xffffffff
+           .word 0xffffffff		; always 0xffffffff for init func
            .word 0x00000000
            .word 0x00000001
            .word 0x00000000
-           .word 0x00000100
+           .word Fx_SFX_LineSel_init
 	; 80000184  00000601 R_C6000_ABS32          00000100   Fx_SFX_LineSel_init + 0
-           .word 0x00000140
+           .word Fx_SFX_LineSel
 	; 80000188  00000501 R_C6000_ABS32          00000140   Fx_SFX_LineSel + 0
            .word 0x00000000
            .word 0x00000000
            .word 0x00000000
            .word 0x00000000
            .word 0x00000000
-           .word 0x20584645
-           .word 0x004c564c
+
+           .word 0x2d786645		; Changed to 'Efx-Lvl' lowercase
+           .word 0x006c764c		; debug to confirm modified effect loaded
            .word 0x00000000
-           .word 0x00000096
-           .word 0x00000064
-           .word 0x00000096
+           .word 0x00000096		; max
+           .word 0x00000064		; init
+           .word 0x00000096		; ???
            .word 0x00000000
-           .word 0x00000064
+           .word Fx_SFX_LineSel_EfxLvl_edit
 	; 800001bc  00000401 R_C6000_ABS32          00000064   Fx_SFX_LineSel_EfxLvl_edit + 0
            .word 0x00000000
            .word 0x00000000
@@ -447,21 +459,22 @@
            .word 0x00000000
            .word 0x00000000
            .word 0x00000000
-           .word 0x2054554f
+
+           .word 0x2054554f		; 'OUT LVL'
            .word 0x004c564c
            .word 0x00000000
-           .word 0x00000096
-           .word 0x00000064
-           .word 0x00000096
+           .word 0x00000096		; max
+           .word 0x00000064		; init
+           .word 0x00000096		; ???
            .word 0x00000000
-           .word 0x000000b0
+           .word Fx_SFX_LineSel_OutLvl_edit
 	; 800001f4  00000301 R_C6000_ABS32          000000b0   Fx_SFX_LineSel_OutLvl_edit + 0
            .word 0x00000000
            .word 0x00000000
            .word 0x00000000
            .word 0x00000000
-           .word 0x00000006
-           .word 0x00000000
+           .word 0x00000006		; bitfield1
+           .word 0x00000000		; bitfield2
 	.dwendtag $C$DW$2
 
 	.def _picTotalDisplay_LineSel
